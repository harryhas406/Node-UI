app.get('/phishing')
res.send
        INSIDE BODY TAG 
        // <div class="background"></div>
        // <div class="container">
        //     <button class="theme-toggle" id="theme-toggle-btn" onclick="toggleTheme()">Switch to Dark Mode</button>
        //     <a href="/"><img class="logo" src="/logo.png" alt="Logo"></a>
        //     <h1 class="heading">Comprehensive Phishing Assessment</h1>
        //     <div class="line"></div>
        //     <form class="form-container" action="/submit" method="post" onsubmit="validateForm(event)">
        //         <input type="text" name="input_string" placeholder="Enter Domain here">
        //         <input type="submit" value="Search">
        //         <div id="error-message" class="error-message">*Please Enter a valid domain</div>
        //     </form>
        // </div>



// INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CDOT Assessment</title>
    <style>
        /* Define dark mode as the default */
        body {
            --background-color: #1e1e1e;
            --text-color: #fff;
            --line-color: #fff;
            --button-background-color: #1669D3;
            --button-hover-color: #1669D3;
            --table-header-bg: #2C3E50;
            --table-row-bg: rgba(255, 255, 255, 0.1);
            --table-row-hover-bg: #333;
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            transition: background-color 0.5s ease, color 0.5s ease;
        }

        .background {
            position: absolute;
            top: 60%;
            left: 50%;
            width: 70%;
            height: 70%;
            background: url('/background.png') no-repeat center center;
            background-size: cover;
            opacity: 0.05;
            transform: translate(-50%, -50%);
            z-index: -1;
            overflow: auto;
        }

        .container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 20px;
        }
        .header-content {
            display: flex;
            align-items: center;
            position: absolute;
            top: 20px;
            left: 30px;
        }

        .logo {
            width: 45px;  /* Adjust the logo size */
            margin-right: 10px; /* Space between logo and heading */
        }   

        .heading {
            color: #1669D3;
            font-size: 30px;
            font-weight: bold;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            padding-bottom: 20px;
        }

        .nav-links {
            margin-top: 75px;
        }

        .nav-links a {
            margin: 0 15px;
            text-decoration: none;
            color: var(--text-color);
            font-size: 18px;
        }

        .nav-links a:hover {
            text-decoration: underline;
        }

        .line {
            position: absolute;
            top: 125px;
            width: 100%;
            height: 2px;
            background-color: var(--line-color);
        }

        /* Center the search form */
        .form-container {
            position: absolute;
            top: 140px;
            left: 50%;
            transform: translateX(-50%);
        }

        .form-container input[type="text"] {
            padding: 10px;
            font-size: 16px;
            width: 250px;
            border-radius: 6px;
            box-shadow: 4px 8px 12px rgba(255,255, 255, 0.5);
        }

        .form-container input[type="submit"] {
            padding: 8px 10px;
            font-size: 20px;
            cursor: pointer;
            color: var(--text-color);
            background-color: var(--button-background-color);
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .form-container input[type="submit"]:hover {
            background-color: var(--button-hover-color);
        }

        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 1px;
            display: none;
        }

        .content {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            margin-top: 60px;
            padding: 0 20px;
            height: 70vh;
        }

        .left-column {
            width: 45%;
            max-height: 100%;
            overflow-y: auto;
            padding-right: 10px;
        }

        .table-container {
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.6);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ddd;
        }
        th {
            background-color: var(--table-header-bg);
        }
        tr:nth-child(even) {
            background-color: var(--table-row-bg);
        }
        tr:hover {
            background-color: var(--table-row-hover-bg);
        }

        .right-column {
            width: 50%;
            max-height: 100%;
            overflow-y: auto;
            padding-left: 10px;
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: 10px;
            padding: 20px;
        }
        a {
            color: #689fc4; /* or any desired color for light mode */
            text-decoration: none;
        }

        /* Link hover state */
        a:hover {
            text-decoration: underline;
        }
    </style>
    <script>
        function validateForm(event) {
            const input = document.querySelector('input[name="input_string"]');
            const errorMessage = document.getElementById('error-message');
            
            if (input.value.trim() === "") {
                event.preventDefault();
                errorMessage.style.display = 'block';
            } else {
                errorMessage.style.display = 'none';
            }
        }

        function loadFiles() {
            fetch('/minio-files')
                .then(response => response.json())
                .then(data => {
                    if (Array.isArray(data)) {
                        let table = '<table><tr><th>File Name</th></tr>';
                        data.forEach(file => {
                            // Remove the file extension using regex
                            const fileNameWithoutExtension = file.replace(/\.[^/.]+$/, "");
                            
                            // Build the table row with file name without extension
                            table += `<tr><td><a href="/fetch/${encodeURIComponent(file)}" target="_blank">${fileNameWithoutExtension}</a></td></tr>`;
                        });
                        table += '</table>';
                        document.getElementById('file-list').innerHTML = table;
                    } else {
                        document.getElementById('file-list').innerHTML = '<p>No files found.</p>';
                    }
                })
                .catch(error => {
                    document.getElementById('file-list').innerHTML = `<p>Error loading files: ${error.message}</p>`;
                });
        }

        window.onload = function() {
            loadFiles();
        };

    </script>
</head>
<body>
    <div class="background"></div>
    <div class="container">
        <div class="header-content">
            <a href="/"><img class="logo" src="/logo.png" alt="Logo"></a>
            <h1 class="heading">CDOT Assessment</h1>
            <!-- Header section with links -->
            <div class="header">
                <div class="nav-links">
                    <a href="/drkweb">Dark Web</a>
                    <a href="/telegram">Hactivist and Terrorism</a>
                    <a href="/phishing">Phishing</a>
                </div>
            </div>
            <div class="line"></div>
            <form class="form-container" action="/" method="post" onsubmit="validateForm(event)">
                <input type="text" name="input_string" placeholder="Enter keyword to Search">
                <input type="image" src="/searchlogo1.png" alt="submit" style="width: 60px; height: auto; vertical-align: bottom;">
                <div id="error-message" class="error-message">*Please Enter a valid keyword</div>
            </form>
        </div>
    </div>

    <!-- Two-column layout for MinIO files and additional content -->
    <div class="content">
        <!-- Left column for MinIO files -->
        <div class="left-column">
            <div class="table-container">
                <h2>MinIO Files</h2>
                <div id="file-list">
                    <!-- Files will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Right column for other content -->
        <div class="right-column">
            <h2>Social Media</h2>
            <p>You can add additional elements here for future use.</p>
        </div>
    </div>
</body>
</html>



// Script for loading on same page minio and telegram




// FILES-PAGE.HTML OLD TABLE FORMAT
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Files in Folder</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Existing styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            color: #333;
            margin: 0;
            /* padding: 20px; */
        }

        .background {
            position: absolute;
            top: 5%;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/background.png') no-repeat center center;
            /*background-size: cover;*/
            background-size: contain; /* Ensures the image fits within the viewport */
            opacity: 0.08;  /* 10% opacity */
            z-index: -1;
        }
        .container {
            position: relative;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            padding-top: 20px;
            /* overflow: auto;  Enable scrolling for the container */
        }
        .logo {
            position: absolute;
            top: 30px;
            left: 30px;
            width: 60px; /* Adjust the logo size */
        }
        .heading {
            color: #1669D3;
            /*color: var(--line-color);*/
            /*color: #1F618D;*/
            position: absolute;
            top: 30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 40px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(255, 255, 255, 0.2); /* Subtle shadow for depth */
            margin: 0;
            z-index: 2;
        }
        .line {
            position: absolute;
            top: 100px;
            width: 100%; /* 75% of the screen width */
            height: 2px; /* Thickness of the line */
            background-color: #1F618D; /* English Blue color */ 
            /*background-color: var(--line-color);*/
        }
        .form-container {
            position: absolute;
            top: 20px;
            right: 42%;
            /*border: 1px solid white;*/
            /*padding: 10px;
            border-style: ridge;
            border-color: grey;
            box-shadow: 0px 4px 8px rgba(255,255, 255, 0.4);*/
        }
        .form-container input[type="text"] {
            padding: 10px;
            font-size: 16px;
            /*border-style: ridge;
            border-color: grey;*/
            width: 250px;
            border-radius: 6px;
            box-shadow: 2px 4px 6px rgba(255,255, 255, 0.5);
        }
        .form-container input[type="submit"] {
            padding: 8px 10px;
            font-size: 20px;
            cursor: pointer;
            color: var(--text-color);
            background-color: var(--button-background-color); /* Change submit button background in dark mode */
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .form-container input[type="submit"]:hover {
            background-color: var(--button-hover-color);
        }
        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 1px;
            display: none;  /* Initially hidden */
        }
        #file-list {
            /* margin: 140px auto;
            max-width: 800px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); */
            max-height: 120vh; /* Set the maximum height of the scrollable area */
            overflow-y: auto;  /* Enable vertical scroll */
            width: 99%; /* Table takes 90% width */
            margin-left: auto;
            margin-right: auto;
            border-radius: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.6);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2c3e50;
            color: #fff;
        }

        tr:hover {
            background-color: #f2f2f2;
        }

        a {
            text-decoration: none;
            color: #2980b9;
        }

        a:hover {
            text-decoration: underline;
        }

        .no-files {
            text-align: center;
            padding: 20px;
            color: #e74c3c;
        }

        /* Modal styles */
        #image-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        #modal-image {
            max-width: 90%;
            max-height: 90%;
            margin: auto;
        }

        #close-modal {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;
            font-size: 30px;
            cursor: pointer;
        }
        .results-heading {
            margin-top: 100px;
            /* margin-bottom: 8px; */
            text-align: left;  /* Align text to the left */
            width: 100%;       /* Ensure it takes the full width */
            padding-left: 10px; /* Optional: Add some left padding for spacing */
            color: #0970b5;
        }
    </style>
    
    <script>
        async function fetchFiles(folderName) {
            try {
                // document.getElementById('loading').style.display = 'block'; // Show loading
                const response = await fetch(`/files/${folderName}`); // Fetch files from the specified folder
                const files = await response.json();
                console.log('Fetched Files:', files); // Log fetched files for debugging
    
                if (Array.isArray(files) && files.length > 0) {
                    let tableRows = '';
                    files.forEach(file => {
                        console.log('Processing file:', file); // Log each file name being processed
                        
                        // Split the file path to get the file name and its details
                        const fileNameWithDetails = file.split('/').pop(); // Get the file name by splitting at '/'
                        const underscoreIndex = fileNameWithDetails.lastIndexOf('_'); // Find last underscore
    
                        // If there's an underscore, split it to get the discovered date part
                        if (underscoreIndex !== -1) {
                            const discoveredDateWithType = fileNameWithDetails.substring(underscoreIndex + 1); // Get the part after '_'
                            const fileName = fileNameWithDetails.substring(0, underscoreIndex); // Get the name before '_'
                            
                            // Extract the discovered date and file type
                            const discoveredDate = discoveredDateWithType.split('.')[0]; // Extract the date (before ".")
                            const fileType = discoveredDateWithType.split('.').pop().toUpperCase(); // Extract the file type (after ".")
    
                            // Append a row to the table with file name, discovered date, and file type
                            const icon = fileType === 'PNG' ? 'fa-file-image' : (fileType === 'CSV' ? 'fa-file-csv' : 'fa-file');
                            tableRows += `
                            <tr>
                                <td><i class="fas ${icon}"></i><a href="${isImageFile(fileType) ? 'javascript:void(0);' : `/fetch/${encodeURIComponent(file)}`}" onclick="${isImageFile(fileType) ? `openModal('/fetch/${encodeURIComponent(file)}')` : ''}">${fileName}</a>
                                <td>${formatDate(discoveredDate)}</td>
                                <td>${fileType}</td>
                            </tr>
                        `;
                        } else {
                            // Handle filenames without an underscore
                            const fileType = fileNameWithDetails.split('.').pop().toUpperCase(); // Get the file type
                            const fileName = fileNameWithDetails; // Use the full filename as no date is present
    
                            // Append a row to the table with the file name and file type
                            const icon = fileType === 'PNG' ? 'fa-file-image' : (fileType === 'CSV' ? 'fa-file-csv' : 'fa-file');
                            tableRows += `
                                <tr>
                                    <td><i class="fas ${icon}"></i><a href="${isImageFile(fileType) ? 'javascript:void(0);' : `/fetch/${encodeURIComponent(file)}`}" onclick="${isImageFile(fileType) ? `openModal('/fetch/${encodeURIComponent(file)}')` : ''}">${fileName}</a>
                                    </td>
                                    <td>No date available</td>
                                    <td>${fileType}</td>
                                </tr>   
                            `;
                        }
                    });
    
                    // Create a table with the rows
                    document.getElementById('file-list').innerHTML = `
                        <table border="1">
                            <thead>
                                <tr>
                                    <th>File Name</th>
                                    <th>Discovered Date</th>
                                    <th>File Type</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${tableRows}
                            </tbody>
                        </table>
                    `; 
                } else {
                    document.getElementById('file-list').innerHTML = 'No files found in this folder.';
                }
            } catch (error) {
                console.error('Error fetching files:', error);
                document.getElementById('file-list').innerHTML = 'Error loading files.';
            }
        }
    
        // Function to format the discovered date (assuming it's in YYYYMMDD format)
        function formatDate(dateString) {
            if (dateString.length === 8) {
                const year = dateString.substring(0, 4);
                const month = dateString.substring(4, 6);
                const day = dateString.substring(6, 8);
                return `${day}-${month}-${year}`; // Flip the date order to DD-MM-YYYY
            }
            return dateString; // Return as-is if not in expected format
        }
        
        // Function to check if the file is an image
        function isImageFile(fileType) {
            return ['PNG', 'JPG', 'JPEG', 'GIF'].includes(fileType);
        }
        // Function to open the modal with the image
        function openModal(imageSrc) {
            const modal = document.getElementById('image-modal');
            const modalImage = document.getElementById('modal-image');
            modalImage.src = imageSrc; // Set the image source
            modal.style.display = 'flex'; // Show the modal
        }
    
        // Function to close the modal
        function closeModal() {
            const modal = document.getElementById('image-modal');
            modal.style.display = 'none'; // Hide the modal
        }
    
        window.onload = function() {
            const params = new URLSearchParams(window.location.search);
            const folderName = params.get('folderName');
    
            if (folderName) {
                document.getElementById('folder-name').innerText = folderName;
                fetchFiles(folderName);
            } else {
                document.getElementById('file-list').innerHTML = 'No folder specified.';
            }
    
            // Ensure the modal elements are available before adding event listeners
            const modal = document.getElementById('image-modal');
            const closeButton = document.getElementById('close-modal');
    
            if (modal && closeButton) {
                // Event listener to close the modal when clicking outside the image
                modal.addEventListener('click', function(event) {
                    if (event.target === this) {
                        closeModal(); // Close if the background is clicked
                    }
                });
    
                // Close modal when clicking the close button
                closeButton.addEventListener('click', closeModal);
            }
        };
    </script>
        
</head>
<body>
    <div class="background"></div>
    <div class="container">
        <a href="/"><img class="logo" src="/CDOT_logo.jpg" alt="logo"></a>
        <h1 class="heading">Files in Folder: <span id="folder-name"></span></h1>
        <div class="line"></div>
        <h2 class="results-heading">Files in Folder: <span id="folder-name"></h2>
        <div id="file-list">
            <!-- File list will be populated here -->
        </div>
    </div>
    <!-- <h2 class="results-heading">Files in Folder: <span id="folder-name"></h2>
    <div id="file-list">
         File list will be populated here 
    </div> -->
    <!-- <h1>Files in Folder: <span id="folder-name"></span></h1>
    <div id="loading" style="display: none; text-align: center;">
        <p>Loading files...</p>
        <img src="Spinner-3.gif" alt="Loading" />
    </div> -->
    
    <!-- Modal for displaying images -->
    <div id="image-modal">
        <span id="close-modal">&times;</span>
        <img id="modal-image" src="" alt="File Image">
    </div>
</body>
</html>




// OLD DARKWEB.HTML WITH SINGLE FILE NAME only
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Darkweb Files</title>
    <style>
        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 2px;
        }
        ::-webkit-scrollbar-track {
            background: #1e1e1e;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 6px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            margin: 0;
            padding: 0;
        }

        .container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 5px;
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            padding: 5px;
        }

        .logo {
            width: 35px;
            margin-right: 10px;
        }

        .nav-links {
            display: flex;
            justify-content: center;
            margin: 0 auto;
            width: 100%;
        }

        .nav-links a {
            margin: 0 10px;
            text-decoration: none;
            color: #fff;
            font-size: 16px;
        }

        .nav-links a:hover {
            text-decoration: underline;
        }

        .line {
            width: 100%;
            height: 2px;
            background-color: #fff;
            margin: 0;
        }

        .form-container {
            position: absolute;
            top: 8px;
            right: 10px;
            width: 50%;
            display: flex;
            justify-content: flex-end;
        }

        .form-container input[type="text"] {
            padding: 5px;
            font-size: 14px;
            width: 200px;
            border-radius: 6px;
            box-shadow: 2px 4px 8px rgba(255, 255, 255, 0.5);
        }

        .form-container input[type="image"] {
            width: 50px;
            height: auto;
            vertical-align: bottom;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
            color: #ffffff;
        }

        #file-list {
            max-width: 60%;
            margin: 20px auto;
            background: #1e1e1e;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        }

        .folder-container {
            display: flex;
            overflow-x: auto;
            white-space: nowrap;
        }

        .folder {
            font-weight: bold;
            font-size: 18px;
            padding: 10px;
            cursor: pointer;
            margin-right: 10px;
            background-color: #333;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .folder:hover {
            background-color: #444;
        }

        .table-container {
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        table th, table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #444;
        }

        table th {
            background-color: #2C3E50;
            color: #fff;
        }

        table tr:nth-child(even) {
            background-color: rgba(255, 255, 255, 0.1);
        }

        table tr:hover {
            background-color: #333;
        }
    </style>    
</head>
<body>
    <div class="container">
        <div class="header-content">
            <a href="/"><img class="logo" src="/CDOT_logo.jpg" alt="Logo"></a>
            <form class="form-container" action="/" method="post" onsubmit="search(event)">
                <input type="text" name="input_string" placeholder="Enter keyword to Search">
                <input type="image" src="/searchlogo1.png" alt="submit">
            </form>
            <div class="nav-links">
                <a href="/drkweb">DarkWeb</a>
                <a href="/telegram">Hactivist_Terrorism</a>
                <a href="/ransomware">RansomWare</a>
                <a href="/phishing">Phishing</a>
            </div>
        </div>
        <div class="line"></div>
    </div>
    
    <h1>DarkWeb Leak File Explorer</h1>

    <div id="file-list">
        <div class="folder-container" id="folder-container">
            <!-- Folder names will appear here -->
        </div>

        <div class="table-container">
            <table id="file-table" style="display: none;">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>Download Link</th>
                    </tr>
                </thead>
                <tbody id="file-table-body">
                    <!-- File entries will appear here -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Function to load folder structure and display folder names horizontally
        function loadFolderStructure() {
            fetch('/list')
                .then(response => response.json())
                .then(data => {
                    const folderContainer = document.getElementById('folder-container');
                    let folderHtml = '';

                    // Loop through folders and display names horizontally
                    for (const folder in data) {
                        folderHtml += `<div class="folder" onclick="showFiles('${folder}')">${folder}</div>`;
                    }

                    folderContainer.innerHTML = folderHtml;
                })
                .catch(error => {
                    document.getElementById('file-list').innerHTML = `<p>Error loading data: ${error.message}</p>`;
                });
        }

        // Function to display files in a table when a folder is clicked
        function showFiles(folderName) {
            fetch(`/list/${folderName}`)
                .then(response => response.json())
                .then(data => {
                    const table = document.getElementById('file-table');
                    const tableBody = document.getElementById('file-table-body');
                    let fileHtml = '';

                    // Access the file list under the folder name
                    const files = data[folderName];

                    // Check if 'files' is an array and handle accordingly
                    if (Array.isArray(files)) {
                        files.forEach(file => {
                            fileHtml += `
                                <tr>
                                    <td>${file}</td>
                                    <td><a href="/fetch/${encodeURIComponent(folderName)}/${encodeURIComponent(file)}" target="_blank">Download</a></td>
                                </tr>
                            `;
                        });
                    } else {
                        // If files is not an array, show a message or log the issue
                        fileHtml = `<tr><td colspan="2">No files available or invalid data format</td></tr>`;
                        console.error('Expected an array but got:', files);
                    }

                    tableBody.innerHTML = fileHtml;
                    table.style.display = 'table';  // Show the table
                })
                .catch(error => {
                    alert(`Error loading files for ${folderName}: ${error.message}`);
                });
        }

        // Load folder structure when the page loads
        window.onload = loadFolderStructure;
    </script>
</body>
</html>


// SIDE BAR INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CDOT Assessment</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- <script src="https://code.highcharts.com/highcharts.js"></script> -->
    <style>
        /* For Chrome, Safari, and Edge */
        ::-webkit-scrollbar {
            width: 4px; /* Set the width of the scrollbar */
        }

        /* Track */
        ::-webkit-scrollbar-track {
            background: #1e1e1e;  /* Track background */
        }

        /* Handle */
        ::-webkit-scrollbar-thumb {
            background: #888; /* Color of the scroll handle (thumb) */
            border-radius: 10px; /* Make the scroll handle rounded */
        }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
            background: #555; /* Darker color when hovering over the scroll handle */
        }
        /* Define dark mode as the default */
        body {
            --background-color: #1e1e1e;
            --text-color: #fff;
            --line-color: #fff;
            --button-background-color: #1669D3;
            --button-hover-color: #1669D3;
            --table-header-bg: #2C3E50;
            --table-row-bg: rgba(255, 255, 255, 0.1);
            --table-row-hover-bg: #333;
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            transition: background-color 0.5s ease, color 0.5s ease;
            scrollbar-width: thin; /* Makes the scrollbar thinner for firefox only */
            scrollbar-color: #888 #1e1e1e; /* thumb color and track color for firefox only */
        }

        .background {
            position: absolute;
            top: 60%;
            left: 50%;
            width: 70%;
            height: 70%;
            background: url('/background.png') no-repeat center center;
            background-size: cover;
            opacity: 0.05;
            transform: translate(-50%, -50%);
            z-index: -1;
            /* overflow: auto; */
        }

        /* .container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 5px;
        } */
        .container {
            display: flex;
            flex-direction: column; /* Keeps header on top */
        }


        .header-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            padding: 5px;
            top: 5px;
            box-sizing: border-box;
        }

        .logo {
            width: 35px;
            margin-right: 10px;
        }

        /* .heading {
            color: #1669D3;
            font-size: 30px;
            font-weight: bold;
            margin: 0;
            word-wrap: break-word;
            text-shadow: 2px 2px 4px rgba(255, 255, 255, 0.2);
        } */

        .nav-links {
            display: flex;
            justify-content: center;
            margin: 0 auto;
            width: 100%;
            z-index: 10;
            /* margin-left: auto; */
        }

        .nav-links a {
            margin: 0 10px;
            text-decoration: none;
            color: var(--text-color);
            font-size: 16px;
            z-index: 20;
        }

        .nav-links a:hover {
            text-decoration: underline;
        }

        .line {
            width: 100%;
            height: 2px;
            background-color: var(--line-color);
            margin: 0;
        }

        /* Center the search form */
        .form-container {
            /* flex-grow: 1;
            display: flex;
            justify-content: right;
            text-align: right;
            top: 8px;
            width: 50%;
            padding: 5px; */
            position: absolute;
            top: 5px;
            right: 10px;
            width: 50%;
            display: flex;
            justify-content: flex-end;
            padding: 4px;
        }

        .form-container input[type="text"] {
            padding: 5px;
            font-size: 14px;
            width: 200px;
            border-radius: 6px;
            box-shadow: 2px 4px 8px rgba(255,255, 255, 0.5);
        }

        .form-container input[type="image"] {
            width: 50px;
            height: auto;
            vertical-align: bottom;
            /* padding: 8px 10px;
            font-size: 20px;
            cursor: pointer;
            color: var(--text-color);
            background-color: var(--button-background-color);
            border: none;
            border-radius: 5px;
            margin-left: 10px; */
        }

        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 10px;
            display: none;
        }

        /* .content {
            display: flex;
            flex-wrap: wrap; 
            justify-content: space-between;
            margin: 20px;
            gap: 20px; 
            overflow-y: auto;
            background-color: #1c1c1c; 
        } */

        .content {
            flex: 1;
            flex-wrap: wrap;
            justify-content: space-between;
            margin: 20px;
            gap: 20px;
            overflow-y: auto;
            background-color: #1c1c1c;
        }

        .column {
            width: calc(50% - 10px); /* Adjusted width to fit two columns */
            padding: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            height: auto;
            background-color: #313840;
            display: flex;
            flex-direction: column;
            margin-bottom: 20px;
            margin-right: 10px; /* Optional space between columns */
        }
        .full-column {
            flex-direction: column; /* Stack the links and chart vertically */
        }

        .links-chart-wrapper {
            display: flex; /* Enable flexbox for links and chart */
            justify-content: space-between; /* Space between links and chart */
            align-items: flex-start; /* Align items to the top */
            width: 100%; /* Full width for the wrapper */
        }

        .links-column {
            width: 20%; /* Adjust width for links */
            padding: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            background-color: #313840; /* Dark background */
            height: 400px; /* Fixed height for links column */
            overflow-y: auto; /* Enable vertical scroll for folder links */
        }

        .chart-column {
            width: 75%; /* Adjust width for chart */
            padding: 10px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            background-color: #313840; /* Dark background */
            height: 400px; /* Fixed height for chart column */
        }

        h5 {
            color: #ffcc00; /* Title color */
            text-align: center; /* Center the title */
            margin-bottom: 10px;
            margin-top: 0;
        }


        .table-container {
            padding: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
            max-width: 100%;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ddd;
            word-wrap: break-word;
        }
        th {
            background-color: var(--table-header-bg);
        }
        tr:nth-child(even) {
            background-color: var(--table-row-bg);
        }
        tr:hover {
            background-color: var(--table-row-hover-bg);
        }

        a {
            color: #689fc4;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }
        /* Sidebar Styles */
        .main-content {
            display: flex; /* Enables sidebar and content to sit side by side */
            flex: 1; /* Allows the main-content to take available height */
            /* padding: 10px; */
            gap: 10px; /* Space between sidebar and content */
        }

        .sidebar {
            width: 200px; /* Width of the sidebar */
            background-color: #2C3E50; /* Dark background */
            overflow: hidden; /* Hide overflowing content */
            transition: width 0.3s; /* Smooth transition */
            display: flex;
            flex-direction: column; /* Arrange sidebar items vertically */
        }

        .sidebar-content {
            padding: 10px; /* Padding inside sidebar */
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: var(--text-color);
            margin: 10px 0; /* Space between links */
        }

        .sidebar-icon {
            width: 20px; /* Icon width */
            height: 20px; /* Icon height */
            margin-right: 10px; /* Space between icon and text */
        }

        .sidebar-text {
            display: inline; /* Show text normally */
        }
        
        .menu-toggle {
            background: transparent;
            border: none;
            color: var(--text-color);
            font-size: 20px;
            cursor: pointer;
            margin: 10px; /* Margin around button */
        }

        /* Styles for the collapsed view */
        .collapsed .sidebar {
            width: 50px; /* Collapsed width */
        }

        .collapsed .sidebar-text {
            display: none; /* Hide text when collapsed */
        }

        .collapsed .sidebar-icon {
            margin-right: 0; /* Remove margin when collapsed */
        }

    </style>
    <script>
        function validateForm(event) {
            const input = document.querySelector('input[name="input_string"]');
            const errorMessage = document.getElementById('error-message');
            
            if (input.value.trim() === "") {
                event.preventDefault();
                errorMessage.style.display = 'block';
            } else {
                errorMessage.style.display = 'none';
            }
        }

        // Function to load darkweb files
        // function loadFiles() {
        //     fetch('/minio-files')
        //         .then(response => response.json())
        //         .then(data => {
        //             if (Array.isArray(data) && data.length > 0) {
        //                 let table = '<table><tr><th>File Name</th></tr>';
        //                 data.forEach(file => {
        //                     const fileNameWithoutExtension = file.replace(/\.[^/.]+$/, "");
        //                     table += `<tr><td><a href="/fetch/${encodeURIComponent(file)}" target="_blank">${fileNameWithoutExtension}</a></td></tr>`;
        //                 });
        //                 table += '</table>';
        //                 document.getElementById('file-list').innerHTML = table;
        //             } else {
        //                 document.getElementById('file-list').innerHTML = '<p>No files found.</p>';
        //             }
        //         })
        //         .catch(error => {
        //             document.getElementById('file-list').innerHTML = `<p>Error loading files: ${error.message}</p>`;
        //         });
        // }

        // Function to load India-related alerts table format
        // function loadIndiaRelatedAlerts() {
        //     fetch('/api/messages?isIndiaRelated=true')
        //         .then(response => response.json())
        //         .then(data => {
        //             if (Array.isArray(data) && data.length > 0) {
        //                 let table = '<table><tr><th>Channel</th><th>Message</th><th>Timestamp</th></tr>';
        //                 data.forEach(message => {
        //                     const istTime = new Date(message._source.timestamp).toLocaleString("en-IN", { timeZone: "Asia/Kolkata" });
        //                     table += `
        //                         <tr>
        //                             <td>${message._source.channel}</td>
        //                             <td>${message._source.text}</td>
        //                             <td>${istTime}</td>
        //                         </tr>
        //                     `;
        //                 });
        //                 table += '</table>';
        //                 document.getElementById('alerts-list').innerHTML = table;
        //             } else {
        //                 document.getElementById('alerts-list').innerHTML = '<p>No alerts found.</p>';
        //             }
        //         })
        //         .catch(error => {
        //             document.getElementById('alerts-list').innerHTML = `<p>Error loading alerts: ${error.message}</p>`;
        //         });
        // }

        // Donut Chart using canvasjs for Social Media
        async function fetchChartData() {
            try {
                const response = await fetch('/pie-chart-data'); // Adjust the route as needed
                const data = await response.json();

                if (Array.isArray(data) && data.length > 0) {
                    const dataPoints = data.map(bucket => ({
                        y: bucket.doc_count,
                        name: bucket.key
                    }));

                    // Create the CanvasJS donut chart
                    var chart = new CanvasJS.Chart("socialMediaChartContainer", {
                        exportEnabled: true,
                        animationEnabled: true,
                        backgroundColor: "transparent", // Set background color to transparent
                        legend: {
                            cursor: "pointer",
                            itemclick: explodePie,
                            fontColor: "#fff", // Set legend text color to white
                            fontSize: 11
                        },
                        data: [{
                            type: "doughnut",
                            showInLegend: true,
                            toolTipContent: "<span style='color: #ff5733'>{name}</span>: <strong>{y}%</strong>",
                            indexLabel: "{name} - {y}",
                            indexLabelFontColor: "#fff",  // Set index label color to white
                            innerRadius: "60%", // Set inner radius for donut effect
                            dataPoints: dataPoints
                        }],
                        // credits: {
                        //     enabled: false  // Disable the watermark
                        // }
                    });
                    chart.render();
                } else {
                    document.getElementById('socialMediaChartContainer').innerHTML = 'No data to display';
                }
            } catch (error) {
                console.error('Error fetching chart data:', error);
            }
        }

        // Explode pie slice on click
        function explodePie(e) {
            if (typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === "undefined" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
                e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
            } else {
                e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
            }
            e.chart.render();
        }

        // Donut chart for Darkweb files, display using Canvasjs
        async function fetchFolderCountData() {
            try {
                const response = await fetch('/folder-count');  // Fetch the folder counts
                const data = await response.json();

                // Log the response for debugging
                console.log('Fetched Data:', data);

                if (Object.keys(data).length > 0) {
                    const dataPoints = Object.keys(data).map(folder => ({
                        y: data[folder],  // File counts as values
                        name: folder      // Folder names as labels
                    }));

                    console.log('Data Points:', dataPoints);

                    // Create the CanvasJS pie chart
                    var chart = new CanvasJS.Chart("darkwebFolderChart", {
                        exportEnabled: true,
                        animationEnabled: true,
                        backgroundColor: "transparent",  // Transparent background
                        legend: {
                            cursor: "pointer",
                            itemclick: explodePie,
                            fontColor: "#fff", // Set legend text color to white
                            fontSize: 11
                        },
                        data: [{
                            type: "doughnut",
                            showInLegend: true,
                            toolTipContent: "{name}: <strong>{y}</strong>",
                            indexLabel: "{name} - {y}",  // Folder name and file count
                            indexLabelFontColor: "#fff",  // White text for labels
                            dataPoints: dataPoints
                        }],
                        credits: {
                            enabled: false  // Disable the watermark
                        }
                    });

                    // Display folder names as clickable links
                    let folderLinks = '';
                    dataPoints.forEach(folder => {
                        folderLinks += `<li><a href="/files-page?folderName=${encodeURIComponent(folder.name)}">${folder.name}</a></li>`;
                    });
                    document.getElementById('folder-links').innerHTML = `<ul>${folderLinks}</ul>`;
                    // Render the chart
                    chart.render();
                } else {
                    document.getElementById('darkwebFolderChart').innerHTML = 'No data to display';
                }
            } catch (error) {
                console.error('Error fetching folder count data:', error);
                document.getElementById('darkwebFolderChart').innerHTML = 'Error loading data';
            }
        }

        async function fetchFiles(folderName) {
            try {
                const response = await fetch(`/files/${folderName}`); // Fetch files from the specified folder
                const files = await response.json();

                // Log the response for debugging
                console.log('Fetched Files:', files);

                if (files.length > 0) {
                    let fileLinks = '';
                    files.forEach(file => {
                        fileLinks += `<li><a href="/fetch/${encodeURIComponent(file)}" target="_blank">${file}</a></li>`;
                    });
                    document.getElementById('file-list').innerHTML = `<ul>${fileLinks}</ul>`; // Display the files
                } else {
                    document.getElementById('file-list').innerHTML = 'No files found in this folder.'; // Handle no files case
                }
            } catch (error) {
                console.error('Error fetching files:', error);
                document.getElementById('file-list').innerHTML = 'Error loading files.'; // Handle fetch error
            }
        }

        //Ashish
        // Bar Graph for displaying phishing data using Canvasjs
        async function displayPhishingData() {
            try {
                // Fetch the phishing data from the backend
                const response = await fetch("/get_phishing_data");
                const phishingData = await response.json();

                // Process the phishing data into dataPoints for the chart
                const dataPoints = phishingData.map(item => ({
                    y: item.entries,
                    label: item.domain  // Use the domain from the file name as the label
                }));

                // Create the chart
                var chart = new CanvasJS.Chart("phishingDataChart", {
                    exportEnabled: true,
                    animationEnabled: true,
                    backgroundColor: "transparent",
                    legend: {
                        cursor: "pointer",
                        itemclick: explodePie,
                        fontColor: "#fff",
                        fontSize: 10
                    },
                    axisY: {
                        title: "Phishing Entries",
                        fontColor: "#fff",
                        labelFontColor: "#fff"
                    },
                    axisX: {
                        title: "Domain",
                        fontColor: "#fff",
                        labelFontColor: "#fff",
                        interval: 1, // Force every label to display
                        labelAngle: 15, // Rotate labels to avoid overlapping
                    },
                    data: [{
                        type: "column",
                        showInLegend: true,
                        legendMarkerColor: "#fff",
                        legendText: "Domain",
                        dataPoints: dataPoints
                    }]
                });

                chart.render();

                // Add hover effect to enhance visibility
                const bars = document.querySelectorAll(".canvasjs-chart-canvas rect");
                bars.forEach(bar => {
                    bar.addEventListener("mouseover", () => {
                            bar.style.fill = "#FFD700";  // Gold color on hover
                        });
                        bar.addEventListener("mouseout", () => {
                            bar.style.fill = "#4CAF50";  // Original color
                        });
                    });


            } catch (error) {
                console.error("Error fetching phishing data:", error);
            }
        }

        // Bar Graph for displaying phishing data using Canvasjs
        // async function displayPhishingData() {
        //     var chart = new CanvasJS.Chart("phishingDataChart", {
        //         exportEnabled: true,
        //         animationEnabled: true,
        //         backgroundColor: "transparent",  // Transparent background
        //         legend: {
        //             cursor: "pointer",
        //             itemclick: explodePie,
        //             fontColor: "#fff" // Set legend text color to white
        //         },
        //         axisY: {
        //             title: "Phishing",
        //             fontColor: "#fff",  // Set y-axis title color to white
        //             labelFontColor: "#fff"  // Set y-axis label color to white
        //         },
        //         axisX: {
        //             title: "Domain",
        //             fontColor: "#fff",  // Set x-axis title color to white
        //             labelFontColor: "#fff"  // Set x-axis label color to white
        //         },
        //         data: [{        
        //             type: "column",  
        //             showInLegend: true, 
        //             legendMarkerColor: "#fff",
        //             legendText: "Domain",
        //             dataPoints: [      
        //                 { y: 51, label: "cdot.in" },
        //                 { y: 50,  label: "mod.gov.in" },
        //                 { y: 136,  label: "dot.in" },
        //                 { y: 13,  label: "angelone.in" },
        //                 { y: 54,  label: "mea.gov.in" },
        //                 { y: 47,  label: "kerala.gov.in" },
        //                 { y: 46,  label: "cdac.in" }
        //             ]
        //         }]
        //     });
        //     chart.render();
        // }

        // Combine both functions under a single window.onload event
        window.onload = async function() {
            // loadFiles();  // Load MinIO files
            // loadIndiaRelatedAlerts();  // Load India-related alerts
            fetchChartData();  // Load Pie Chart data Fr
            fetchFolderCountData(); // Load Darkweb files as Chart
            displayPhishingData(); // Display Phishing Data as Chart
            // fetchFiles();
        };

        // Union Search on the home page
        // function search(event) {
        //     event.preventDefault();

        //     const formData = new FormData(event.target);
        //     const keyword = formData.get('input_string');

        //     fetch('/api/search', {
        //         method: 'POST',
        //         headers: {
        //             'Content-Type': 'application/json'
        //         },
        //         body: JSON.stringify({ input_string: keyword })
        //     })
        //     .then(response => response.json())
        //     .then(data => {
        //         // Clear previous results
        //         document.getElementById('file-list').innerHTML = '';
        //         document.getElementById('elastic-results').innerHTML = '';

        //         // Display darkweb files
        //         if (data.minioFiles.length > 0) {
        //             let fileTable = '<table><tr><th>File Name</th></tr>';
        //             data.minioFiles.forEach(file => {
        //                 fileTable += `<tr><td><a href="/fetch/${file}" target="_blank">${file}</a></td></tr>`;
        //             });
        //             fileTable += '</table>';
        //             document.getElementById('file-list').innerHTML = fileTable;
        //         } else {
        //             document.getElementById('file-list').innerHTML = '<p>No MinIO files found.</p>';
        //         }

        //         // Display Elasticsearch results
        //         if (data.elasticsearchResults.length > 0) {
        //             let messageTable = '<table><tr><th>Channel</th><th>Message</th></tr>';
        //             data.elasticsearchResults.forEach(hit => {
        //                 messageTable += `<tr><td>${hit._source.channel}</td><td>${hit._source.text}</td></tr>`;
        //             });
        //             messageTable += '</table>';
        //             document.getElementById('elastic-results').innerHTML = messageTable;
        //         } else {
        //             document.getElementById('elastic-results').innerHTML = '<p>No messages found.</p>';
        //         }
        //     })
        //     .catch(error => console.error('Error:', error));
        // }

    </script>
</head>
<body>
    <!-- <div class="background"></div> -->
    
    <div class="container">
        <div class="header-content">
            <a href="/"><img class="logo" src="/CDOT_logo.jpg" alt="Logo"></a>
            <!-- <div class="nav-links">
                <a href="/drkweb">DarkWeb</a>
                <a href="/telegram">Hactivist_Terrorism</a>
                <a href="/ransomware">RansomWare</a>
                <a href="/phishing">Phishing</a>
            </div> -->
        </div>
        <div class="line"></div>
        
        <div class="main-content"> <!-- New container for sidebar and content -->
            <div class="sidebar">
                <div class="sidebar-content">
                    <a href="/drkweb" class="sidebar-link">
                        <img src="/darkweb_icon.png" alt="Dark Web" class="sidebar-icon">
                        <span class="sidebar-text">DarkWeb</span>
                    </a>
                    <a href="/telegram" class="sidebar-link">
                        <img src="/telegram_icon.png" alt="Telegram" class="sidebar-icon">
                        <span class="sidebar-text">Hactivist_Terrorism</span>
                    </a>
                    <a href="/ransomware" class="sidebar-link">
                        <img src="/ransomware_icon.png" alt="Ransomware" class="sidebar-icon">
                        <span class="sidebar-text">RansomWare</span>
                    </a>
                    <a href="/phishing" class="sidebar-link">
                        <img src="/phishing_icon.png" alt="Phishing" class="sidebar-icon">
                        <span class="sidebar-text">Phishing</span>
                    </a>
                </div>
                <button class="menu-toggle" onclick="toggleSidebar()">☰</button>
            </div>

            <div class="content">
                <!-- Box 1 -->
                <div class="column full-column">
                    <h5>DARKWEB FILES</h5>
                    <div class="links-chart-wrapper">
                        <div class="links-column">
                            <div id="folder-links" style="text-align: left;">
                                <!-- Folder links will be inserted here by fetchFolderCountData() -->
                            </div>
                            <div id="file-list">
                                <!-- Files will be displayed here when a folder is clicked -->
                            </div>
                        </div>
                        <div class="chart-column">
                            <div id="darkwebFolderChart" style="height: 400px; background: transparent;">
                                <!-- Pie chart will be rendered here -->
                            </div>
                        </div>
                    </div>
                </div>
        
                <!-- Box 2 -->
                <div class="column">
                    <h5>SOCIAL MEDIA</h5>
                    <div id="socialMediaChartContainer" style="height: 400px; width: 100%; background: transparent;"></div>
                </div>
        
                <!-- Box 3 -->
                <div class="column">
                    <h5>RANSOM STATS OF MONTH</h5>
                    <iframe src="/bar_chart_last_7_days.html" style="width:100%; height:350px; border:none;"></iframe>
                </div>
        
                <!-- Box 4 -->
                <div class="column">
                    <h5>PHISHING</h5>
                    <div id="phishingDataChart" style="width: 100%; height: 370px; background: transparent;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // function toggleSidebar() {
        //     const sidebar = document.getElementById('sidebar');
        //     sidebar.classList.toggle('collapsed');
        // }
        function toggleSidebar() {
            document.body.classList.toggle('collapsed');
        }
    </script>
</body>
</html>
